     1                                  ;********************************************************************************************
     2                                  ; Program name:          Reverse Array                                            *
     3                                  ; Programming Language:  x86 Assembly                                                       *
     4                                  ; Program Description:   This program asks a user to input integers into an array and       *
     5                                  ;                        returns array in reverse.                          *
     6                                  ;                                                                                           *
     7                                  ;********************************************************************************************
     8                                  ; Author Information:                                                                       *
     9                                  ; Name:         Bilal El-haghassan                                                          *
    10                                  ; Email:        bilalelhaghassan@csu.fullerton.edu                                          *    
    11                                  ; Institution:  California State University - Fullerton                                     *
    12                                  ; Course:       CPSC 240-05 Assembly Language                                               *
    13                                  ;                                                                                           *
    14                                  ;********************************************************************************************
    15                                  ; Copyright (C) 2020 Bilal El-haghassan                                                     *
    16                                  ; This program is free software: you can redistribute it and/or modify it under the terms   * 
    17                                  ; of the GNU General Public License version 3 as published by the Free Software Foundation. * 
    18                                  ; This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY  *
    19                                  ; without even the implied Warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. * 
    20                                  ; See the GNU General Public License for more details. A copy of the GNU General Public     *
    21                                  ; License v3 is available here:  <https://www.gnu.org/licenses/>.                           *
    22                                  ;                                                                                           *
    23                                  ;********************************************************************************************
    24                                  
    25                                  extern printf
    26                                  extern scanf
    27                                  extern atolong
    28                                  extern isinteger
    29                                  
    30                                  global input_array                  ; Makes function callable from other linked files.
    31                                  
    32                                  section .data
    33 00000000 546865206C61737420-         invalid db "The last input was invalid and not entered into the array.", 10, 0
    33 00000009 696E70757420776173-
    33 00000012 20696E76616C696420-
    33 0000001B 616E64206E6F742065-
    33 00000024 6E746572656420696E-
    33 0000002D 746F20746865206172-
    33 00000036 7261792E0A00       
    34 0000003C 257300                      stringFormat db "%s", 0
    35                                  
    36                                  section .bss
    37                                  
    38                                  section .text
    39                                  
    40                                  input_array:
    41                                  
    42                                  ; Back up all registers and set stack pointer to base pointer
    43 00000000 55                      push rbp
    44 00000001 4889E5                  mov rbp, rsp
    45 00000004 57                      push rdi
    46 00000005 56                      push rsi
    47 00000006 52                      push rdx
    48 00000007 51                      push rcx
    49 00000008 4150                    push r8
    50 0000000A 4151                    push r9
    51 0000000C 4152                    push r10
    52 0000000E 4153                    push r11
    53 00000010 4154                    push r12
    54 00000012 4155                    push r13
    55 00000014 4156                    push r14
    56 00000016 4157                    push r15
    57 00000018 53                      push rbx
    58                                  
    59 00000019 6AFF                    push qword -1                           ; Extra push to create even number of pushes
    60                                  
    61                                  ;-----------------------------INITIALIZE PARAMETERS-----------------------------------------
    62 0000001B 4989FF                  mov qword r15, rdi                      ; Address of array saved to r15.
    63 0000001E 4989F6                  mov qword r14, rsi                      ; Max number of elements allowed in array.
    64 00000021 41BD00000000            mov qword r13, 0                        ; Set counter to 0 elements in Array.
    65                                  
    66                                  
    67                                  ;---------------------------------START OF LOOP---------------------------------------------
    68                                  begin_loop:
    69                                  
    70                                  ; Scanf function called to take user input.
    71 00000027 48BF-                   mov qword rdi, stringFormat
    71 00000029 [3C00000000000000] 
    72 00000031 6A00                    push qword 0
    73 00000033 4889E6                  mov qword rsi, rsp                      ; Stack pointer points to where scanf outputs.
    74 00000036 B800000000              mov qword rax, 0
    75 0000003B E8(00000000)            call scanf
    76                                  
    77                                  ; Tests if Control + D is entered to finish inputing into array.
    78 00000040 4898                    cdqe
    79 00000042 4883F8FF                cmp rax, -1                          
    80 00000046 7455                    je end_of_loop                          ; If control + D is entered, jump to end_of_loop.
    81                                  
    82                                  ;------------------------------INPUT VALIDATION---------------------------------------------
    83                                  ; Checks to see if each character in the input string of integers is from 0 to 9.
    84                                  
    85 00000048 B800000000              mov qword rax, 0
    86 0000004D 4889E7                  mov qword rdi, rsp
    87 00000050 E8(00000000)            call isinteger
    88 00000055 4883F800                cmp rax, 0                              ; Checks to see if isinteger returned true/false.
    89 00000059 7420                    je invalid_input                        ; If isinteger returns 0. jump to not_an_int label.
    90                                  
    91                                  ;---------------------------------ASCII TO LONG---------------------------------------------
    92                                  ; Converts string of characters (user input) into a long integer. 
    93                                  
    94 0000005B B800000000              mov qword rax, 0
    95 00000060 4889E7                  mov qword rdi, rsp
    96 00000063 E8(00000000)            call atolong                            
    97 00000068 4989C4                  mov qword r12, rax                      ; Saves output long integer from atolong in r12.
    98 0000006B 4158                    pop r8                                  ; Pop off stack into any scratch register. 
    99                                  
   100                                  ;--------------------------------COPY INTO ARRAY--------------------------------------------
   101                                  ; Adds copy of long integer saved in r12 into array at index of counter (r13).
   102                                  
   103 0000006D 4F8924EF                mov [r15 + 8 * r13], r12                ; Copies user input into array at index of r13.
   104 00000071 49FFC5                  inc r13                                 ; Increments counter r13 by 1.
   105                                  
   106                                  ;-----------------------------ARRAY CAPACITY TEST-------------------------------------------
   107                                  ; Tests to see if max array capacity has been reached.
   108 00000074 4D39F5                  cmp r13, r14                            ; Compares # of elements (r13) to capacity (r14).
   109 00000077 7426                    je exit                                 ; If # of elements equals capacity, exit loop.
   110                                  
   111                                  ; Restarts loop.
   112 00000079 EBAC                    jmp begin_loop
   113                                  
   114                                  ;--------------------------------INVALID INPUT----------------------------------------------
   115                                  ; Prints out invalid input statement and restarts loop and pops stack to offset initial push
   116                                  ; at the beginning of the loop.
   117                                  
   118                                  invalid_input:
   119 0000007B 48BF-                   mov rdi, stringFormat
   119 0000007D [3C00000000000000] 
   120 00000085 48BE-                   mov rsi, invalid 
   120 00000087 [0000000000000000] 
   121 0000008F B800000000              mov rax, 0
   122 00000094 E8(00000000)            call printf
   123 00000099 4158                    pop r8                                 ; Pop off stack to any scratch register.  
   124 0000009B EB8A                    jmp begin_loop                         ; Restarts loop.
   125                                  
   126                                  ;---------------------------------END OF LOOP-----------------------------------------------
   127                                  
   128                                  ; After control+D is entered the loop is skipped and so is the pop in the loop
   129                                  ; therefore this controlD block makes up for that missed pop.
   130                                  end_of_loop:
   131 0000009D 4158                    pop r8                                  ; Pop off stack into any scratch register.                
   132                                  
   133                                  ;------------------------------------EXIT---------------------------------------------------
   134                                  exit:
   135                                  
   136                                  ; Restore all backed up registers to their original state.
   137 0000009F 58                      pop rax                                 ; Remove extra push of -1 from stack.
   138 000000A0 4C89E8                  mov qword rax, r13                      ; Copies # of elements in r13 to rax.
   139 000000A3 5B                      pop rbx                                                     
   140 000000A4 415F                    pop r15                                                     
   141 000000A6 415E                    pop r14                                                      
   142 000000A8 415D                    pop r13                                                      
   143 000000AA 415C                    pop r12                                                      
   144 000000AC 415B                    pop r11                                                     
   145 000000AE 415A                    pop r10                                                     
   146 000000B0 4159                    pop r9                                                      
   147 000000B2 4158                    pop r8                                                      
   148 000000B4 59                      pop rcx                                                     
   149 000000B5 5A                      pop rdx                                                     
   150 000000B6 5E                      pop rsi                                                     
   151 000000B7 5F                      pop rdi                                                     
   152 000000B8 5D                      pop rbp
   153                                  
   154 000000B9 C3                      ret
