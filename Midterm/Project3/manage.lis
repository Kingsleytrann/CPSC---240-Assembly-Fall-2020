     1                                  ;********************************************************************************************
     2                                  ; Program name:          Sum of Integers - Array                                            *
     3                                  ; Programming Language:  x86 Assembly                                                       *
     4                                  ; Program Description:   This program asks a user to input integers into an array and       *
     5                                  ;                        returns the sum of integers in the array.                          *
     6                                  ;                                                                                           *
     7                                  ;********************************************************************************************
     8                                  ; Author Information:                                                                       *
     9                                  ; Name:         Bilal El-haghassan                                                          *
    10                                  ; Email:        bilalelhaghassan@csu.fullerton.edu                                          *    
    11                                  ; Institution:  California State University - Fullerton                                     *
    12                                  ; Course:       CPSC 240-05 Assembly Language                                               *
    13                                  ;                                                                                           *
    14                                  ;********************************************************************************************
    15                                  ; Copyright (C) 2020 Bilal El-haghassan                                                     *
    16                                  ; This program is free software: you can redistribute it and/or modify it under the terms   * 
    17                                  ; of the GNU General Public License version 3 as published by the Free Software Foundation. * 
    18                                  ; This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY  *
    19                                  ; without even the implied Warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. * 
    20                                  ; See the GNU General Public License for more details. A copy of the GNU General Public     *
    21                                  ; License v3 is available here:  <https://www.gnu.org/licenses/>.                           *
    22                                  ;                                                                                           *
    23                                  ;********************************************************************************************
    24                                  ; Program information                                                                       *
    25                                  ;   Program name: Sum of Integers - Array                                                   *
    26                                  ;   Programming languages: One module in C, Four modules in X86, Two modules in c++         *
    27                                  ;   Files in this program: manager.asm, input_array.asm, sum.asm, atol.asm, main.c,         *   
    28                                  ;   					   validate_decimal_digits.cpp, display_array.cpp                   *
    29                                  ;                                                                                           *
    30                                  ;********************************************************************************************
    31                                  ; This File                                                                                 *
    32                                  ;    Name:      manager.asm                                                                 *
    33                                  ;    Purpose:   To manage all the files in the program and call to functions input_array,   *
    34                                  ;               sum and display_array as needed.                                            *
    35                                  ;                                                                                           *
    36                                  ;********************************************************************************************
    37                                  
    38                                  extern printf
    39                                  extern scanf
    40                                  extern getdata
    41                                  extern showarray
    42                                  extern reverse
    43                                  
    44                                  array_size equ 100                  ; Capacity limit for number of elements allowed in array.
    45                                  
    46                                  global manage                     ; Makes function callable from other linked files.
    47                                  
    48                                  section .data
    49 00000000 0A57656C636F6D6520-     welcome db 10, "Welcome to Array Mangement Tool.", 10
    49 00000009 746F20417272617920-
    49 00000012 4D616E67656D656E74-
    49 0000001B 20546F6F6C2E0A     
    50 00000022 496E70757420796F75-             db "Input your integer data with white space separating each number", 10
    50 0000002B 7220696E7465676572-
    50 00000034 206461746120776974-
    50 0000003D 682077686974652073-
    50 00000046 706163652073657061-
    50 0000004F 726174696E67206561-
    50 00000058 6368206E756D626572-
    50 00000061 0A                 
    51 00000062 0A506C656173652065-             db 10, "Please enter integer data to be stored in your array. Press enter ", 10
    51 0000006B 6E74657220696E7465-
    51 00000074 676572206461746120-
    51 0000007D 746F2062652073746F-
    51 00000086 72656420696E20796F-
    51 0000008F 75722061727261792E-
    51 00000098 20507265737320656E-
    51 000000A1 746572200A         
    52 000000A6 616E6420436E746C2B-             db "and Cntl+D to terminate: ", 10, 0
    52 000000AF 4420746F207465726D-
    52 000000B8 696E6174653A200A00 
    53 000000C1 0A5468652064617461-     reverseddata db 10,"The data have been reversed. This is the array:", 10, 0
    53 000000CA 206861766520626565-
    53 000000D3 6E2072657665727365-
    53 000000DC 642E20546869732069-
    53 000000E5 732074686520617272-
    53 000000EE 61793A0A00         
    54 000000F3 5468616E6B20796F75-     inarray db "Thank you. The array contains the following data: ", 10, 0
    54 000000FC 2E2054686520617272-
    54 00000105 617920636F6E746169-
    54 0000010E 6E732074686520666F-
    54 00000117 6C6C6F77696E672064-
    54 00000120 6174613A200A00     
    55 00000127 0A0A546865206C656E-     length db 10, 10, "The length squared of this array is ", 0
    55 00000130 677468207371756172-
    55 00000139 6564206F6620746869-
    55 00000142 732061727261792069-
    55 0000014B 732000             
    56 0000014E 497320746869732063-     correctness db "Is this correct (y or n)?", 0
    56 00000157 6F7272656374202879-
    56 00000160 206F72206E293F00   
    57 00000168 257300                  stringFormat db "%s", 0
    58 0000016B 256C6400                numberFormat db "%ld", 0
    59                                  
    60                                  section .bss
    61 00000000 <res 00000320>              intArray: resq 100                  ; Uninitialized array with 100 reserved qwords.
    62                                      
    63                                  section .text
    64                                  
    65                                  manage:
    66                                  
    67                                  ; Back up all registers and set stack pointer to base pointer
    68 00000000 55                      push rbp
    69 00000001 4889E5                  mov rbp, rsp
    70 00000004 57                      push rdi
    71 00000005 56                      push rsi
    72 00000006 52                      push rdx
    73 00000007 51                      push rcx
    74 00000008 4150                    push r8
    75 0000000A 4151                    push r9
    76 0000000C 4152                    push r10
    77 0000000E 4153                    push r11
    78 00000010 4154                    push r12
    79 00000012 4155                    push r13
    80 00000014 4156                    push r14
    81 00000016 4157                    push r15
    82 00000018 53                      push rbx
    83 00000019 9C                      pushf
    84                                  
    85 0000001A 6AFF                    push qword -1                           ; Extra push to create even number of pushes
    86                                  
    87                                  ;-----------------------------INITIALIZE PARAMETERS-----------------------------------------
    88 0000001C 41BE00000000            mov qword r14, 0                        ; Reserve register for number of elements in array.
    89 00000022 41BD00000000            mov qword r13, 0                        ; Reserve register for lengthsquared of the array.
    90                                  
    91 00000028 6A00                    push qword 0
    92 0000002A B800000000              mov qword rax, 0
    93 0000002F 48BF-                   mov qword rdi, stringFormat
    93 00000031 [6801000000000000] 
    94 00000039 48BE-                   mov qword rsi, welcome
    94 0000003B [0000000000000000] 
    95 00000043 E8(00000000)            call printf
    96                                  
    97                                  ;---------------------------CALL FUNCTION INPUT_ARRAY---------------------------------------
    98                                  
    99                                  ;push qword 0
   100 00000048 48BF-                   mov qword rdi, intArray                 ; Passes array into rdi register.
   100 0000004A [0000000000000000] 
   101 00000052 B800000000              mov qword rax, 0
   102 00000057 E8(00000000)            call getdata                        ; Calls funtion input_array.
   103 0000005C 4989C6                  mov r14, rax                            ; Saves copy of input_array output into r14.
   104 0000005F 4158                    pop r8
   105                                  
   106 00000061 B800000000              mov qword rax, 0
   107 00000066 48BF-                   mov qword rdi, stringFormat
   107 00000068 [6801000000000000] 
   108 00000070 48BE-                   mov qword rsi, inarray
   108 00000072 [F300000000000000] 
   109 0000007A E8(00000000)            call printf
   110                                  
   111                                  ;----------------------------OUTPUT ARRAY--------------------------------------
   112                                  
   113 0000007F 48BF-                   mov qword rdi, intArray                 ; Passes the array as first parameter.
   113 00000081 [0000000000000000] 
   114 00000089 4C89F6                  mov qword rsi, r14                      ; Passes # of elements in the array stored in r14.
   115 0000008C B800000000              mov qword rax, 0
   116 00000091 E8(00000000)            call showarray                       ; Calls output_array function.
   117                                  
   118 00000096 B800000000              mov qword rax, 0
   119 0000009B 48BF-                   mov qword rdi, stringFormat
   119 0000009D [6801000000000000] 
   120 000000A5 48BE-                   mov qword rsi, correctness
   120 000000A7 [4E01000000000000] 
   121 000000AF E8(00000000)            call printf
   122                                  
   123 000000B4 41BF79000000            mov r15, 121
   124                                  
   125 000000BA 6A00                    push qword 0
   126 000000BC B800000000              mov rax, 0
   127 000000C1 48BF-                   mov rdi, stringFormat
   127 000000C3 [6801000000000000] 
   128 000000CB 4889E6                  mov rsi, rsp
   129 000000CE E8(00000000)            call scanf
   130 000000D3 415B                    pop r11
   131                                  
   132 000000D5 B800000000              mov qword rax, 0
   133 000000DA 48BF-                   mov qword rdi, stringFormat
   133 000000DC [6801000000000000] 
   134 000000E4 48BE-                   mov qword rsi, correctness
   134 000000E6 [4E01000000000000] 
   135 000000EE E8(00000000)            call printf
   136                                  
   137 000000F3 4D39FB                  cmp r11, r15
   138 000000F6 744F                    je errormsg
   139                                  
   140 000000F8 B800000000              mov qword rax, 0
   141 000000FD 48BF-                   mov qword rdi, stringFormat
   141 000000FF [6801000000000000] 
   142 00000107 48BE-                   mov qword rsi, reverseddata
   142 00000109 [C100000000000000] 
   143 00000111 E8(00000000)            call printf
   144                                  ;---------------------------CALL REVERSED------------------------------------- 
   145                                  
   146 00000116 48BF-                   mov qword rdi, intArray                 ; Passes the array      
   146 00000118 [0000000000000000] 
   147 00000120 4C89F6                  mov qword rsi, r14                      ; Passes # of elements in the array stored in r14.
   148 00000123 B800000000              mov qword rax, 0
   149 00000128 E8(00000000)            call reverse      
   150 0000012D 4989C5                  mov r13, rax                
   151                                  
   152 00000130 48BF-                   mov qword rdi, intArray                 ; Passes the array as first parameter.
   152 00000132 [0000000000000000] 
   153 0000013A 4C89F6                  mov qword rsi, r14                      ; Passes # of elements in the array stored in r14.
   154 0000013D B800000000              mov qword rax, 0
   155 00000142 E8(00000000)            call showarray                       ; Calls output_array function.
   156                                  
   157                                  errormsg:
   158                                  
   159                                  ;-----------------------------END OF FILE-----------------------------------------------
   160                                  
   161                                  ; Restores all registers to their original state.
   162 00000147 58                      pop rax                                  ; Remove extra push of -1 from stack.
   163 00000148 4C89F0                  mov qword rax, r14                       ; Copies length squared to rax.
   164 0000014B 9D                      popf                                                 
   165 0000014C 5B                      pop rbx                                                     
   166 0000014D 415F                    pop r15                                                     
   167 0000014F 415E                    pop r14                                                      
   168 00000151 415D                    pop r13                                                      
   169 00000153 415C                    pop r12                                                      
   170 00000155 415B                    pop r11                                                     
   171 00000157 415A                    pop r10                                                     
   172 00000159 4159                    pop r9                                                      
   173 0000015B 4158                    pop r8                                                      
   174 0000015D 59                      pop rcx                                                     
   175 0000015E 5A                      pop rdx                                                     
   176 0000015F 5E                      pop rsi                                                     
   177 00000160 5F                      pop rdi                                                     
   178 00000161 5D                      pop rbp
   179                                  
   180 00000162 C3                      ret
