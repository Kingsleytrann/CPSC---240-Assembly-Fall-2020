     1                                  ;********************************************************************************************
     2                                  ; Program name:          Reverse Array                                            *
     3                                  ; Programming Language:  x86 Assembly                                                       *
     4                                  ; Program Description:   This program asks a user to input integers into an array and       *
     5                                  ;                        returns array in reverse.                          *
     6                                  ;                                                                                           *
     7                                  ;********************************************************************************************
     8                                  ; Author Information:                                                                       *
     9                                  ; Name:         Bilal El-haghassan                                                          *
    10                                  ; Email:        bilalelhaghassan@csu.fullerton.edu                                          *    
    11                                  ; Institution:  California State University - Fullerton                                     *
    12                                  ; Course:       CPSC 240-05 Assembly Language                                               *
    13                                  ;                                                                                           *
    14                                  ;********************************************************************************************
    15                                  ; Copyright (C) 2020 Bilal El-haghassan                                                     *
    16                                  ; This program is free software: you can redistribute it and/or modify it under the terms   * 
    17                                  ; of the GNU General Public License version 3 as published by the Free Software Foundation. * 
    18                                  ; This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY  *
    19                                  ; without even the implied Warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. * 
    20                                  ; See the GNU General Public License for more details. A copy of the GNU General Public     *
    21                                  ; License v3 is available here:  <https://www.gnu.org/licenses/>.                           *
    22                                  ;                                                                                           *
    23                                  ;********************************************************************************************
    24                                  
    25                                  extern printf
    26                                  extern scanf
    27                                  extern input_array
    28                                  extern display_array
    29                                  extern reverse
    30                                  
    31                                  array_size equ 100                  ; Capacity limit for number of elements allowed in array.
    32                                  
    33                                  global manager                     ; Makes function callable from other linked files.
    34                                  
    35                                  section .data
    36 00000000 546869732070726F67-         intructions db "This program will reverse an array of integers", 10, 
    36 00000009 72616D2077696C6C20-
    36 00000012 726576657273652061-
    36 0000001B 6E206172726179206F-
    36 00000024 6620696E7465676572-
    36 0000002D 730A               
    37 0000002F 506C6561736520656E-                     db "Please enter integers separated by ws. Press enter followed by Control+D"
    37 00000038 74657220696E746567-
    37 00000041 657273207365706172-
    37 0000004A 617465642062792077-
    37 00000053 732E20507265737320-
    37 0000005C 656E74657220666F6C-
    37 00000065 6C6F77656420627920-
    37 0000006E 436F6E74726F6C2B44 
    38 00000077 20746F2066696E6973-                     db " to finish", 10, 0
    38 00000080 680A00             
    39 00000083 5468652076616C7565-         numsreceived db "The values in the array are: ", 0
    39 0000008C 7320696E2074686520-
    39 00000095 617272617920617265-
    39 0000009E 3A2000             
    40 000000A1 546865206172726179-         reversed db "The array has been reversed", 10, 0
    40 000000AA 20686173206265656E-
    40 000000B3 207265766572736564-
    40 000000BC 0A00               
    41 000000BE 4E6567617469766520-         negative db "Negative 1 will be returned to the driver.", 10, 0
    41 000000C7 312077696C6C206265-
    41 000000D0 2072657475726E6564-
    41 000000D9 20746F207468652064-
    41 000000E2 72697665722E0A00   
    42 000000EA 257300                      stringFormat db "%s", 0 
    43                                  
    44                                  section .bss
    45 00000000 <res 00000320>              intArray: resq 100                  ; Uninitialized array with 100 reserved qwords.
    46                                  
    47                                  section .text
    48                                  
    49                                  manager:
    50                                  
    51                                  ; Back up all registers and set stack pointer to base pointer
    52 00000000 55                      push rbp
    53 00000001 4889E5                  mov rbp, rsp
    54 00000004 57                      push rdi
    55 00000005 56                      push rsi
    56 00000006 52                      push rdx
    57 00000007 51                      push rcx
    58 00000008 4150                    push r8
    59 0000000A 4151                    push r9
    60 0000000C 4152                    push r10
    61 0000000E 4153                    push r11
    62 00000010 4154                    push r12
    63 00000012 4155                    push r13
    64 00000014 4156                    push r14
    65 00000016 4157                    push r15
    66 00000018 53                      push rbx
    67 00000019 9C                      pushf
    68                                  
    69 0000001A 6AFF                    push qword -1                           ; Extra push to create even number of pushes
    70                                  
    71                                  ;-----------------------------INITIALIZE PARAMETERS-----------------------------------------
    72 0000001C 41BE00000000            mov qword r14, 0                        ; Reserve register for number of elements in array.
    73 00000022 41BD00000000            mov qword r13, 0                        ; Reserve register for Sum of integers in array
    74                                  
    75                                  ;-------------------------------INSTRUCTION PROMPT------------------------------------------
    76                                  
    77 00000028 48BF-                   mov qword rdi, stringFormat                     
    77 0000002A [EA00000000000000] 
    78 00000032 48BE-                   mov qword rsi, intructions              
    78 00000034 [0000000000000000] 
    79 0000003C B800000000              mov qword rax, 0
    80 00000041 E8(00000000)            call printf                             ; Prints out intructionS prompt.
    81                                  
    82                                  ;---------------------------CALL FUNCTION INPUT_ARRAY---------------------------------------
    83                                  
    84 00000046 48BF-                   mov qword rdi, intArray                 ; Passes array into rdi register.
    84 00000048 [0000000000000000] 
    85 00000050 BE64000000              mov qword rsi, array_size               ; Passes the max array size into rsi register.
    86 00000055 B800000000              mov qword rax, 0
    87 0000005A E8(00000000)            call input_array                        ; Calls funtion input_array.
    88 0000005F 4989C6                  mov r14, rax                            ; Saves copy of input_array output into r14.
    89                                  
    90                                  ;-------------------------CONFIRMS OUTPUT OF INPUTTED VALUES--------------------------------
    91                                  
    92 00000062 48BF-                   mov qword rdi, stringFormat
    92 00000064 [EA00000000000000] 
    93 0000006C 48BE-                   mov qword rsi, numsreceived
    93 0000006E [8300000000000000] 
    94 00000076 B800000000              mov qword rax, 0
    95 0000007B E8(00000000)            call printf                             ; Prints out received confirmation
    96                                  
    97                                  ;----------------------------DISPLAY ELEMENTS OF ARRAY--------------------------------------
    98                                  ; Calls display_array that prints out each integer in the array seperated by 1 space.
    99                                  
   100 00000080 48BF-                   mov qword rdi, intArray                 ; Passes the array as first parameter.
   100 00000082 [0000000000000000] 
   101 0000008A 4C89F6                  mov qword rsi, r14                      ; Passes # of elements in the array stored in r14.
   102 0000008D B800000000              mov qword rax, 0
   103 00000092 E8(00000000)            call display_array                      ; Calls display_array function.
   104                                  
   105                                  ;------------------------------------REVERSE-----------------------------------------------
   106 00000097 B800000000              mov rax, 0
   107 0000009C 48BF-                   mov rdi, intArray
   107 0000009E [0000000000000000] 
   108 000000A6 4C89F6                  mov rsi, r14
   109 000000A9 E8(00000000)            call reverse
   110                                  
   111 000000AE B800000000              mov rax, 0
   112 000000B3 48BF-                   mov rdi, stringFormat
   112 000000B5 [EA00000000000000] 
   113 000000BD 48BE-                   mov rsi, reversed
   113 000000BF [A100000000000000] 
   114 000000C7 E8(00000000)            call printf
   115                                  
   116 000000CC 48BF-                   mov qword rdi, stringFormat
   116 000000CE [EA00000000000000] 
   117 000000D6 48BE-                   mov qword rsi, numsreceived
   117 000000D8 [8300000000000000] 
   118 000000E0 B800000000              mov qword rax, 0
   119 000000E5 E8(00000000)            call printf    
   120                                  
   121 000000EA 48BF-                   mov qword rdi, intArray                 ; Passes the array as first parameter.
   121 000000EC [0000000000000000] 
   122 000000F4 4C89F6                  mov qword rsi, r14                      ; Passes # of elements in the array stored in r14.
   123 000000F7 B800000000              mov qword rax, 0
   124 000000FC E8(00000000)            call display_array                      ; Calls display_array function.
   125                                  
   126 00000101 B800000000              mov rax, 0
   127 00000106 48BF-                   mov rdi, stringFormat
   127 00000108 [EA00000000000000] 
   128 00000110 48BE-                   mov rsi, negative
   128 00000112 [BE00000000000000] 
   129 0000011A E8(00000000)            call printf
   130                                  
   131                                  ;---------------------------------END OF FILE-----------------------------------------------
   132                                  
   133                                  ; Restores all registers to their original state.
   134 0000011F 58                      pop rax                                 ; Remove extra push of -1 from stack.
   135 00000120 48C7C0FFFFFFFF          mov qword rax, -1                      ; Copies Sum (r13) to rax.
   136 00000127 9D                      popf                                                 
   137 00000128 5B                      pop rbx                                                     
   138 00000129 415F                    pop r15                                                     
   139 0000012B 415E                    pop r14                                                      
   140 0000012D 415D                    pop r13                                                      
   141 0000012F 415C                    pop r12                                                      
   142 00000131 415B                    pop r11                                                     
   143 00000133 415A                    pop r10                                                     
   144 00000135 4159                    pop r9                                                      
   145 00000137 4158                    pop r8                                                      
   146 00000139 59                      pop rcx                                                     
   147 0000013A 5A                      pop rdx                                                     
   148 0000013B 5E                      pop rsi                                                     
   149 0000013C 5F                      pop rdi                                                     
   150 0000013D 5D                      pop rbp
   151                                  
   152 0000013E C3                      ret
