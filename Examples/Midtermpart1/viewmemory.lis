     1                                  ;Author name: Floyd Holliday
     2                                  ;Author email: holliday@fullerton.edu
     3                                  
     4                                  ;Program name: Show System Memory
     5                                  ;Programming languages: C++ (driver), X86 (algorithm)
     6                                  ;Date program began: March 1, 2019
     7                                  ;Date of last update: March 3, 2019
     8                                  ;Files in this program: viewmemory-driver.c, viewmemory.asm, r.sh
     9                                  ;Status: Done.  No more work will be done on this program apart from fixing any reported errors.
    10                                  ;Purpose: Display a segment of memory centered at an address provided by the user of this program.  The output will included qwords 
    11                                  ;in hex both before and after the given address.
    12                                  
    13                                  ;This file name: viewmemory.asm
    14                                  ;This file language: X86
    15                                  ;This file syntax: Intel
    16                                  ;Assemble: nasm -f elf64 -o view.o -l viewmemory.lis viewmemory.asm
    17                                  
    18                                  ;Program Viewmemory: display a contiguous segment of memory:
    19                                  ;Parameters passed in:
    20                                  ;     rdi = identifying integer
    21                                  ;     rsi = number of qwords located at smaller addresses, non-negative integer
    22                                  ;     rdx = number of qwords located at higher addresses, non-negative integer
    23                                  ;     rcx = address (location) where the output is localized; this is zero-point.
    24                                  
    25                                  ;Create a new term for use in this program:
    26                                  ;    The zero-point is a location (or an address) where the human user of this software has focused attention.  This quantity is 
    27                                  ;    passed in by the calling program.
    28                                  
    29                                  ;Prototype of this function: 
    30                                  ;    long unsigned int * viewmemory(long int a, long unsigned int b, long unsigned int c, void * d);
    31                                  
    32                                  ;Identify incoming parameters:  
    33                                  ;    1st parameter a = an arbitrary integer sent by the caller for identification purposes only; may be negative.
    34                                  ;    2nd parameter b = number of qwords with addresses less than the zero point.
    35                                  ;    3rd parameter c = number of qwords with addresses greater than the zero point.
    36                                  ;    4th parameter d = the physical address of the zero point itself.
    37                                  
    38                                  ;Identify the single outgoing parameter:
    39                                  ;    The outgoing parameter is the address of the next instruction to be executed following the 'ret' instruction.
    40                                  
    41                                  ;Lessons to learn: What is an address? Your first answer is probably 64 bits holding a non-negative integer.  That is true, and we 
    42                                  ;call such things "unsigned longs".  However, an address is rather special kind of "unsigned long".  For example we never think of 
    43                                  ;multiplying together two unsigned long addresses.  Nor do we ever consider dividing one address by another address to obtain a 
    44                                  ;third address.  Therefore, we come to the question of what data type in C++ best describes 64-bit numbers with a limited set of 
    45                                  ;arithmetic operations allowed?  The only reasonable answer seems to be (long unsigned int)*, or as we say "pointer to 
    46                                  ;unsigned long data".
    47                                  
    48                                  ;Clarification of term: In the description of how this program works you will find strings such as "current position of rsp".  That 
    49                                  ;means the position of rsp at the time this subprogram, viewmemory, was called.  The reader of software like this one should be 
    50                                  ;aware of this subtle distinction.
    51                                  
    52                                  extern printf
    53                                  
    54                                  global viewmemory                                           ;This declaration allows the subprogram to be called from outside this file.
    55                                  
    56                                  segment .data                                               ;This segment declares initialized data
    57                                  
    58 00000000 537461636B2044756D-     stackheadformat db "Stack Dump # %d: ", 
    58 00000009 7020232025643A20   
    59 00000011 726270203D20253031-                     db "rbp = %016lx rsp = %016lx", 10, 
    59 0000001A 366C7820727370203D-
    59 00000023 20253031366C780A   
    60 0000002B 4F6666736574202020-                     db "Offset    Address           Value", 10, 0
    60 00000034 204164647265737320-
    60 0000003D 202020202020202020-
    60 00000046 2056616C75650A00   
    61                                  
    62 0000004E 252B35642020253031-     stacklineformat db "%+5d  %016lx  %016lx", 10, 0
    62 00000057 366C78202025303136-
    62 00000060 6C780A00           
    63                                  
    64                                  segment .bss                                                ;This segment declares uninitialized data
    65                                      ;This segment is empty
    66                                  
    67                                  segment .text                                               ;Executable instructions appear in this segment
    68                                  
    69                                  viewmemory:                                                 ;Where execution begins when this program is called.
    70                                  
    71                                  ;===== Backup all the registers that are used in this program =====================================================================
    72 00000000 55                      push rbp                                                    ;Backup the base pointer
    73 00000001 4889E5                  mov  rbp,rsp                                                ;Advance the base pointer to start of the current stack frame
    74 00000004 57                      push rdi                                                    ;Backup rdi
    75 00000005 56                      push rsi                                                    ;Backup rsi
    76 00000006 52                      push rdx                                                    ;Backup rdx
    77 00000007 51                      push rcx                                                    ;Backup rcx
    78 00000008 4150                    push r8                                                     ;Backup r8
    79 0000000A 4151                    push r9                                                     ;Backup r9
    80 0000000C 4152                    push r10                                                    ;Backup r10
    81 0000000E 4153                    push r11                                                    ;Backup r11: printf often changes r11
    82 00000010 4154                    push r12                                                    ;Backup r12
    83 00000012 4155                    push r13                                                    ;Backup r13
    84 00000014 4156                    push r14                                                    ;Backup r14
    85 00000016 4157                    push r15                                                    ;Backup r15
    86 00000018 53                      push rbx                                                    ;Backup rbx
    87 00000019 9C                      pushf                                                       ;Backup rflags
    88                                  ;rax, rip, and rsp are intentionally not backed up.  r15 is not used explicitly in this program, but it is backed up nevertheless.
    89                                  
    90                                  ;===== Prepare to output the dump stack header =====================================================================================
    91                                  ;At this time the integer stack has the following structure
    92                                  ;              |---------------------------|
    93                                  ;     rsp+20*8 | variable in caller        | = 5th variable declared in caller
    94                                  ;              |---------------------------|
    95                                  ;     rsp+19*8 | variable in caller        | = 4th variable declared in caller
    96                                  ;              |---------------------------|
    97                                  ;     rsp+18*8 | variable in caller        | = 3rd variable declared in caller
    98                                  ;              |---------------------------|
    99                                  ;     rsp+17*8 | variable in caller        | = 2nd variable declared in caller
   100                                  ;              |---------------------------|
   101                                  ;     rsp+16*8 | variable in caller        | = 1st variable declared in caller
   102                                  ;              |---------------------------|
   103                                  ;     rsp+15*8 | return address            | = the stack pointer was here immediately before execution was handed off to the called program
   104                                  ;              |---------------------------|
   105                                  ;     rsp+14*8 | rbp                       | = base pointer of caller program pushed by this x86 module
   106                                  ;              |---------------------------|
   107                                  ;     rsp+13*8 | rdi                       | = arbitrary number passed in from caller module
   108                                  ;              |---------------------------|
   109                                  ;     rsp+12*8 | rsi                       | = number of quadwords outside of stack
   110                                  ;              |---------------------------|
   111                                  ;     rsp+11*8 | rdx                       | = number of quadwords inside of stack not counting the top qword
   112                                  ;              |---------------------------|
   113                                  ;     rsp+10*8 | rcx                       | = zero-point = location in memory where the display of memory will be centered
   114                                  ;              |---------------------------|
   115                                  ;     rsp+9*8  | r8                        |
   116                                  ;              |---------------------------|
   117                                  ;     rsp+8*8  | r9                        |
   118                                  ;              |---------------------------|
   119                                  ;     rsp+7*8  | r10                       |
   120                                  ;              |---------------------------|
   121                                  ;     rsp+6*8  | r11                       |
   122                                  ;              |---------------------------|
   123                                  ;     rsp+5*8  | r12                       |
   124                                  ;              |---------------------------|
   125                                  ;     rsp+4*8  | r13                       |
   126                                  ;              |---------------------------|
   127                                  ;     rsp+3*8  | r14                       |
   128                                  ;              |---------------------------|
   129                                  ;     rsp+2*8  | r15                       |
   130                                  ;              |---------------------------|
   131                                  ;     rsp+1*8  | rbx                       |
   132                                  ;              |---------------------------|
   133                                  ;     rsp+0    | rflags                    |
   134                                  ;              |---------------------------|
   135                                  
   136                                  ;Observation: the distance in bytes from the current position of rsp and the location of "return address" is 15*8 = 120 bytes.
   137                                  ;This number, 120, will be needed further down in this program.
   138                                  
   139                                  
   140                                  ;===== Output the header prior to displaying the contents of memory =======================================================================
   141                                  ;Assign values to be passed to printf for outputting the dump stack header
   142                                  
   143 0000001A 48BF-                   mov rdi, stackheadformat                              ;The format of the header
   143 0000001C [0000000000000000] 
   144 00000024 488B742468              mov qword rsi, [rsp+13*8]                                   ;Arbitrary number passed in from caller
   145 00000029 488B542470              mov qword rdx, [rsp+14*8]                                   ;Base pointer of the stack frame of this x86 module
   146 0000002E 4889E1                  mov rcx,rsp                                                 ;Copy the current value of rsp into rcx
   147 00000031 4883C178                add rcx,120                                                 ;rcx hold the pointer to the top of stack at the time this x86 module was called
   148 00000035 B800000000              mov qword rax, 0                                            ;Zero in rax signals to printf that no vector registers (xmm) are used.
   149 0000003A E8(00000000)            call printf
   150                                  
   151                                  
   152                                  ;===== Set up conditions before entering a loop ===========================================================================================
   153                                  ;Retrieve from the stack the number of qwords within the stack to be displayed
   154 0000003F 4C8B6C2458              mov qword r13, [rsp+11*8]                                   ;r13 will serve as loop counter variable
   155                                  ;Retrieve from the stack the number of qwords outside the stack to be displayed
   156 00000044 4C8B742460              mov qword r14, [rsp+12*8]                                   ;r14 will help define the loop termination condition
   157 00000049 49F7DE                  neg r14                                                     ;Negate r14.  Now r14 contains a negative or zero integer
   158                                  
   159                                  
   160                                  ;Setup rbx as offset number that will appear in the first column of output.
   161 0000004C 488B442458              mov qword rax, [rsp+11*8]                                   ;Retrieve from the stack the number of qwords within the stack to be displayed.
   162 00000051 41BC08000000            mov qword r12, 8                                            ;Temporarily store 8 in r12
   163 00000057 49F7E4                  mul r12                                                     ;Multiply rax by 8 bytes per qword: assume product does not overflow into rdx
   164 0000005A 4889C3                  mov qword rbx, rax                                          ;Save the product in rbx (column 1 of output)
   165                                  
   166                                  ;Setup r12 as the address that will appear in the second column of output
   167 0000005D 4C8B642450              mov qword r12,[rsp+10*8]   ;correct to here                                 ;Copy the new zero point to r1245
   168 00000062 B808000000              mov rax,8                                                   ;8 = number of bytes in a qword
   169 00000067 49F7E5                  mul r13                                                     ;rdx:rax will hold number of bytes with addresses less than r12 to be outputted.
   170 0000006A 4901C4                  add r12,rax                                                 ;Add number of bytes of data inside of stack to be outputted; assume rdx is zero
   171                                  
   172                                  
   173                                  beginloop: ;===== The top of the loop is here ============================================================================================
   174                                  
   175                                  ;===== Prepare to output one line of the body of the stack dump ===========================================================================
   176                                  ;Follow the CCC-64 protocol
   177 0000006D 48BF-                   mov rdi, stacklineformat                                    ;Format for offset, address, and quadword value
   177 0000006F [4E00000000000000] 
   178 00000077 4889DE                  mov qword rsi, rbx                                          ;rbx stores the offset value (column 1 of the output)
   179 0000007A 4C89E2                  mov qword rdx, r12                                          ;r12 stores the address to be displayed (column 2 of the output)
   180 0000007D 488B0A                  mov qword rcx, [rdx]                                        ;rcx receives the contents of memory at the address to be displayed
   181 00000080 B800000000              mov qword rax, 0                                            ;No vector registers contain data for printf
   182 00000085 E8(00000000)            call printf
   183                                  
   184                                  
   185                                  ;===== Advance the variables 8 bytes in the direction of small addresses ==================================================================
   186 0000008A 4883EB08                sub rbx, 8                                                  ;rbx stores column 1, which is the offset value
   187 0000008E 4983EC08                sub r12, 8                                                  ;r12 stores column 2, which is the address value
   188 00000092 49FFCD                  dec r13                                                     ;r13 is loop counter; it decrements from high value to low (possibly negative) value
   189                                  
   190                                  
   191                                  ;===== Check for loop termination condition ===============================================================================================
   192 00000095 4D39F5                  cmp r13, r14                                                ;Compare loop variable r13 with terminating value r14
   193 00000098 7DD3                    jge beginloop                                               ;If r13 >= r14 then continue to iterate
   194                                  
   195                                  
   196                                  ;===== Restore original values to integer registers =======================================================================================
   197 0000009A 9D                      popf                                                        ;Restore rflags
   198 0000009B 5B                      pop rbx                                                     ;Restore rbx
   199 0000009C 415F                    pop r15                                                     ;Restore r15
   200 0000009E 415E                    pop r14                                                     ;Restore r14
   201 000000A0 415D                    pop r13                                                     ;Restore r13
   202 000000A2 415C                    pop r12                                                     ;Restore r12
   203 000000A4 415B                    pop r11                                                     ;Restore r11
   204 000000A6 415A                    pop r10                                                     ;Restore r10
   205 000000A8 4159                    pop r9                                                      ;Restore r9
   206 000000AA 4158                    pop r8                                                      ;Restore r8
   207 000000AC 59                      pop rcx                                                     ;Restore rcx
   208 000000AD 5A                      pop rdx                                                     ;Restore rdx
   209 000000AE 5E                      pop rsi                                                     ;Restore rsi
   210 000000AF 5F                      pop rdi                                                     ;Restore rdi
   211 000000B0 5D                      pop rbp                                                     ;Restore rbp
   212                                  
   213                                  ;Now the number of pushes equals the number of pops.
   214                                  ;
   215                                  ;Pick a number to send back to the calling program.  We will send the address in heap space where is located the next instruction for the caller.
   216                                  ;That means we send back the value on the top of the stack.
   217 000000B1 488B0424                mov rax,[rsp]
   218                                  
   219                                  ;It is time to leave this program.  The value on top of the stack is the address of the next instruction to execute.
   220 000000B5 C3                      ret                                                         ;Pop the qword on top of the stack into rip
   221                                  
   222                                  ;End of viewmemory
