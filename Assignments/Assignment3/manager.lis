     1                                  ;********************************************************************************************
     2                                  ; Program name:          Sorting Array                                                      *
     3                                  ; Programming Language:  x86 Assembly                                                       *
     4                                  ; Program Created:		 October 12, 2020													*
     5                                  ; Program Completed:	 October 23, 2020													*
     6                                  ; Last Modified:		 October 31, 2020													*
     7                                  ; Program Description:   This program asks a user to input integers into an array and       *
     8                                  ;                        returns the same array but sorted in ascending order.              *
     9                                  ;                                                                                           *
    10                                  ;********************************************************************************************
    11                                  ; Author Information:                                                                       *
    12                                  ; Name:         Bilal El-haghassan                                                          *
    13                                  ; Email:        bilalelhaghassan@csu.fullerton.edu                                          *    
    14                                  ; Institution:  California State University - Fullerton                                     *
    15                                  ; Course:       CPSC 240-05 Assembly Language                                               *
    16                                  ;                                                                                           *
    17                                  ;********************************************************************************************
    18                                  ; Copyright (C) 2020 Bilal El-haghassan                                                     *
    19                                  ; This program is free software: you can redistribute it and/or modify it under the terms   * 
    20                                  ; of the GNU General Public License version 3 as published by the Free Software Foundation. * 
    21                                  ; This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY  *
    22                                  ; without even the implied Warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. * 
    23                                  ; See the GNU General Public License for more details. A copy of the GNU General Public     *
    24                                  ; License v3 is available here:  <https://www.gnu.org/licenses/>.                           *
    25                                  ;                                                                                           *
    26                                  ;********************************************************************************************
    27                                  ; Program Information                                                                       *
    28                                  ; Program name:   Sorting Array			                                       				*
    29                                  ; Languages used: One module in C, Five modules in x86, Three modules in C++ 				*
    30                                  ; Files included: manager.asm, input_array.asm, swap.asm, atol.asm, read_clock.asm 			*   
    31                                  ;   			  main.cpp, isinteger.cpp, display_array.cpp, bubble_sort.c      			*
    32                                  ;                                                                                           *
    33                                  ;********************************************************************************************
    34                                  ; This File                                                                                 *
    35                                  ;    Name:      manager.asm                                                           		*
    36                                  ;    Purpose:   To manage all the files in the program and call functions input_array,      *
    37                                  ;               bubblesort and display_array and returns largest value in array to main.    *
    38                                  ;	 Language:	x86-64																		*
    39                                  ;	 Assemble:	nasm -f elf64 -l manager.lis -o manager.o manager.asm			            *
    40                                  ;	 Link:		gcc -m64 -no-pie -o array.out -std=c11 main.o manager.o input_array.o 		*
    41                                  ;				swap.o isinteger.o atolong.o display_array.o bubble_sort.o read_clock.o		*
    42                                  ;																							*
    43                                  ;********************************************************************************************
    44                                  
    45                                  ;Declare the names of functions called in this file whose source code is not in this file.
    46                                  extern printf
    47                                  extern scanf
    48                                  extern input_array
    49                                  extern display_array
    50                                  extern bubbleSort
    51                                  
    52                                  array_size equ 100                 ; Capacity limit for number of elements allowed in array.
    53                                  
    54                                  global manager                     ; Makes function callable from other linked files.
    55                                  
    56                                  section .data
    57 00000000 546869732070726F67-         intructions db "This program will sort your array of integers", 10, 
    57 00000009 72616D2077696C6C20-
    57 00000012 736F727420796F7572-
    57 0000001B 206172726179206F66-
    57 00000024 20696E746567657273-
    57 0000002D 0A                 
    58 0000002E 456E74657220612073-                     db "Enter a sequence of long integers separated by white space.", 10, 
    58 00000037 657175656E6365206F-
    58 00000040 66206C6F6E6720696E-
    58 00000049 746567657273207365-
    58 00000052 706172617465642062-
    58 0000005B 792077686974652073-
    58 00000064 706163652E0A       
    59 0000006A 416674657220746865-                     db "After the last input press enter followed by Control+D:", 10, 0
    59 00000073 206C61737420696E70-
    59 0000007C 757420707265737320-
    59 00000085 656E74657220666F6C-
    59 0000008E 6C6F77656420627920-
    59 00000097 436F6E74726F6C2B44-
    59 000000A0 3A0A00             
    60 000000A3 0A5468657365206E75-         numsreceived db 10, "These numbers were received and placed into the array:", 10, 0
    60 000000AC 6D6265727320776572-
    60 000000B5 652072656365697665-
    60 000000BE 6420616E6420706C61-
    60 000000C7 63656420696E746F20-
    60 000000D0 746865206172726179-
    60 000000D9 3A0A00             
    61 000000DC 0A5468652061727261-         sort_confirm db 10, "The array has been sorted by the bubble sort algorithm", 10,
    61 000000E5 792068617320626565-
    61 000000EE 6E20736F7274656420-
    61 000000F7 627920746865206275-
    61 00000100 62626C6520736F7274-
    61 00000109 20616C676F72697468-
    61 00000112 6D0A               
    62 00000114 0A5468697320697320-                      db 10, "This is th order of the values in the array now:", 10, 0
    62 0000011D 7468206F7264657220-
    62 00000126 6F6620746865207661-
    62 0000012F 6C75657320696E2074-
    62 00000138 686520617272617920-
    62 00000141 6E6F773A0A00       
    63 00000147 0A546865206C617267-         largestnumber db 10, "The largest number in the array will now be returned to ",
    63 00000150 657374206E756D6265-
    63 00000159 7220696E2074686520-
    63 00000162 61727261792077696C-
    63 0000016B 6C206E6F7720626520-
    63 00000174 72657475726E656420-
    63 0000017D 746F20             
    64 00000180 746865206D61696E20-                       db "the main function.", 10, 0
    64 00000189 66756E6374696F6E2E-
    64 00000192 0A00               
    65 00000194 257300                      stringFormat db "%s", 0 
    66 00000197 256C6400                    numberFormat db "%ld", 0
    67                                  
    68                                  section .bss
    69 00000000 <res 00000320>              intArray: resq 100             ; Uninitialized array with 100 reserved qwords.
    70                                  
    71                                  section .text
    72                                  
    73                                  manager:
    74                                  
    75                                  ; Back up all registers and set stack pointer to base pointer
    76 00000000 55                      push rbp
    77 00000001 4889E5                  mov rbp, rsp
    78 00000004 57                      push rdi
    79 00000005 56                      push rsi
    80 00000006 52                      push rdx
    81 00000007 51                      push rcx
    82 00000008 4150                    push r8
    83 0000000A 4151                    push r9
    84 0000000C 4152                    push r10
    85 0000000E 4153                    push r11
    86 00000010 4154                    push r12
    87 00000012 4155                    push r13
    88 00000014 4156                    push r14
    89 00000016 4157                    push r15
    90 00000018 53                      push rbx
    91 00000019 9C                      pushf
    92                                  
    93 0000001A 6AFF                    push qword -1                           ; Extra push to create even number of pushes
    94                                  
    95                                  ;-----------------------------INITIALIZE PARAMETERS-----------------------------------------
    96 0000001C 41BE00000000            mov qword r14, 0                        ; Reserve register for number of elements in array.
    97 00000022 41BD00000000            mov qword r13, 0                        ; Reserve register for largest value in array.
    98                                  
    99                                  ;-------------------------------INSTRUCTION PROMPT------------------------------------------
   100                                  
   101 00000028 48BF-                   mov qword rdi, stringFormat                     
   101 0000002A [9401000000000000] 
   102 00000032 48BE-                   mov qword rsi, intructions              
   102 00000034 [0000000000000000] 
   103 0000003C B800000000              mov qword rax, 0
   104 00000041 E8(00000000)            call printf                             ; Prints out intructions prompt.
   105                                  
   106                                  ;---------------------------CALL FUNCTION INPUT_ARRAY---------------------------------------
   107                                  
   108 00000046 48BF-                   mov qword rdi, intArray                 ; Passes array into rdi register.
   108 00000048 [0000000000000000] 
   109 00000050 BE64000000              mov qword rsi, array_size               ; Passes the max array size into rsi register.
   110 00000055 B800000000              mov qword rax, 0
   111 0000005A E8(00000000)            call input_array                        ; Calls funtion input_array.
   112 0000005F 4989C6                  mov r14, rax                            ; Saves copy of input_array output into r14.
   113                                  
   114                                  ;-------------------------CONFIRMS OUTPUT OF INPUTTED VALUES--------------------------------
   115                                  
   116 00000062 48BF-                   mov qword rdi, stringFormat
   116 00000064 [9401000000000000] 
   117 0000006C 48BE-                   mov qword rsi, numsreceived
   117 0000006E [A300000000000000] 
   118 00000076 B800000000              mov qword rax, 0
   119 0000007B E8(00000000)            call printf                             ; Prints out received confirmation
   120                                  
   121                                  ;----------------------------DISPLAY ELEMENTS OF ARRAY--------------------------------------
   122                                  ; Calls display_array which prints out each integer in the array seperated by 1 space.
   123                                  
   124 00000080 48BF-                   mov qword rdi, intArray                 ; Passes the array as first parameter.
   124 00000082 [0000000000000000] 
   125 0000008A 4C89F6                  mov qword rsi, r14                      ; Passes # of elements in the array stored in r14.
   126 0000008D B800000000              mov qword rax, 0
   127 00000092 E8(00000000)            call display_array                      ; Calls display_array function.
   128                                  
   129                                  ;--------------------------------CALL BUBBLE SORT------------------------------------------- 
   130                                  
   131 00000097 48BF-                   mov qword rdi, intArray                 ; Passes the array
   131 00000099 [0000000000000000] 
   132 000000A1 4C89F6                  mov qword rsi, r14                      ; Passes number of elements in array.       
   133 000000A4 B800000000              mov qword rax, 0
   134 000000A9 E8(00000000)            call bubbleSort                         ; Calls bubble sort function to sort array.
   135                                  
   136                                  ;----------------------------BUBBLE SORT CONFIRMATION---------------------------------------
   137                                  
   138 000000AE 48BF-                   mov qword rdi, stringFormat
   138 000000B0 [9401000000000000] 
   139 000000B8 48BE-                   mov qword rsi, sort_confirm             ; Prints out sorting confirmation.
   139 000000BA [DC00000000000000] 
   140 000000C2 B800000000              mov qword rax, 0
   141 000000C7 E8(00000000)            call printf
   142                                  
   143                                  ;-------------------------------DISPLAY SORTED ARRAY----------------------------------------
   144                                  ; Calls display_array which prints out each integer in the array seperated by 1 space.
   145                                  
   146 000000CC 48BF-                   mov qword rdi, intArray                 ; Passes the array as first parameter.
   146 000000CE [0000000000000000] 
   147 000000D6 4C89F6                  mov qword rsi, r14                      ; Passes # of elements in the array stored in r14.
   148 000000D9 B800000000              mov qword rax, 0
   149 000000DE E8(00000000)            call display_array                      ; Calls display_array function.
   150                                  
   151                                  ;-----------------------------LARGEST NUMBER IN ARRAY---------------------------------------
   152                                  
   153 000000E3 48BF-                   mov qword rdi, stringFormat             
   153 000000E5 [9401000000000000] 
   154 000000ED 48BE-                   mov qword rsi, largestnumber            ; Confirms largest number will be returned to main.
   154 000000EF [4701000000000000] 
   155 000000F7 B800000000              mov qword rax, 0
   156 000000FC E8(00000000)            call printf                             ; Prints confirmation of largest number in array.
   157                                  
   158                                  ;--------------------------FIND LARGEST NUMBER IN ARRAY-------------------------------------
   159                                  
   160 00000101 4E8B2CF5[F8FFFFFF]      mov r13, [intArray + (r14 - 1) * 8]      ; Copy largest (last) element in array into r13.
   161                                  
   162                                  ;---------------------------------END OF FILE-----------------------------------------------
   163                                  
   164                                  
   165 00000109 4C89E8                  mov qword rax, r13                       ; Copies Largest number in array (r13) to rax.
   166 0000010C 4158                    pop r8                                   ; Remove extra push of -1 from stack.
   167                                  
   168                                  ; Restores all registers to their original state.
   169 0000010E 9D                      popf                                                 
   170 0000010F 5B                      pop rbx                                                     
   171 00000110 415F                    pop r15                                                     
   172 00000112 415E                    pop r14                                                      
   173 00000114 415D                    pop r13                                                      
   174 00000116 415C                    pop r12                                                      
   175 00000118 415B                    pop r11                                                     
   176 0000011A 415A                    pop r10                                                     
   177 0000011C 4159                    pop r9                                                      
   178 0000011E 4158                    pop r8                                                      
   179 00000120 59                      pop rcx                                                     
   180 00000121 5A                      pop rdx                                                     
   181 00000122 5E                      pop rsi                                                     
   182 00000123 5F                      pop rdi                                                     
   183 00000124 5D                      pop rbp
   184                                  
   185 00000125 C3                      ret
